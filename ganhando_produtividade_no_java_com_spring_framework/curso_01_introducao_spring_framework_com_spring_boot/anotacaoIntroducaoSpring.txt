# Spring Framework
* Framework open sourcce desenvolvido para a plataforma java baseado nos padrões de projetos de controle e injeção de dependência.
* Estrutura composta por módulo afins de reduzir a complexidade no desenvolvimento de aplicações simples ou corporativa.

## Inversão de controle
* Inversion of Control ou IoC, trata-se do redirecionamento do fluxo de execução de um códgio retirando parcialmente o controle sobre ele e delegando-o para um container.
O principal propósito é minimizar o acoplamento do código.

## Injeção de dependências
* Injeção de dependência é um padrão de desenvolvimento com a finalidade de manter o baixo nível de acoplamento entre módulos de um sistema

## Beans
Objeto que é instanciado (criado), montado e gerenciado por um container do princípio da inversão de controle

## Singleton
O container do Spring IoC define apenas uma instância do objeto

## Prototype
Será criado um novo objeto a cada solicitação ao container

## HTTP - Request
Um bean será criado para cada requisição HTTP

## HTTP - Session
Um bean será criado para a sessão de usuário

## HTTP - Global
Ou Application Scope cria um bean para o ciclo de vida do contexto da aplicação

## Autowired
Um anotação (indicação) onde deverá ocorrer uma injeção automãtica de dependência.

* byName: É buscado um método set que corresponde ao nome do Bean
* byType: É considerado o tipo da classe para inclusão do Bean
* byConstrutor: Usamos o construtor para incluir a dependência

## SpringBoot
Enquanto que o Spring Framework é baseado no padrão de injeção de dependências, o Springboot foca na configuração automática

## Antes do Springboot
Desafios com a configuração do projeto:
* Dependência individual
* Verbosidade
* Incompatibilidade de versões
* Complexidade de gestão
* Configurações complexas e repetitivas

## Springboot
Dado que a maior parte das configurações necessárias para o início do projeto são sempre as mesmas, por que não iniciar um projeto com todas estas configurações já definidas?

## Starters
Benefícios:
* Coesão
* Versões compatíveis
* Otimização do tempo
* Configuração simples
* Foco no negócio

## Alguns Starters
Listagem de alguns startes mais utilizados

Spring-boot-starter-*
* data-jpa: Integração ao banco de dados via JPA - Hibernate
* data-mongodb: Interação com banco de dados MongoDB
* web: inclusão do container Tomcat para aplicação REST
* web-services: Webservices baseados na arquitetura SOAP.
* batch: Implementação de JOBs de processos
* test: Disponibilização de recursos para testes unitários como JUnit
* openfeign: Client HTTP baseado em interfaces
* actuator: Gerenciamento de monitoramento de aplicação.

## Quando usar Beans?
Quando não se tem acesso ao código fonte

## Quando usar componente?
Quando é uma classe que vai ser provida pelo conceito de injeção de dependências

## Nem tudo é igual
* O poderoso application.properties
* @Value
* Default value

## O QUE É ORM?
* Object-Relational Mapping, Em português, mapeamento objeto-relacional, é um recurso para aproximar o paradigma da orientação a objetos ao contexto de banco de dados relacional

* O uso de ORM é realizado através do mapeamento de objeto para uma tabela por uma biblioteca ou framework.

## JPA
JPA é uma especificação baseada em interfaces, que através de um framework realiza operações de persistência de objetos em Java.

## Mapeamento
Vamos conhecer os aspectos das anotações de mapeamento do JPA
* Identificação
* Definição
* Relacionamento
* Herança
* Persistência

## Spring Data JPA
* O projeto SPring Data Jpa facilita a implementação do padrão Repository através de AOP (Aspect Oriented Programming - programação orientada a aspectos).
* Adiciona uma camada sobre o JPA. Isso significa que ele usa todos os recursos definidos pela especificação JPA, especialmente os mapeamentos de entidade e os recursos de persistência baseado em interfaces e anotações. Por isso, o SPring Data JPA adiciona seus próprios recursos, como uma implementação sem código do padrão de repositório e a criação de consultas de banco de dados a partir de nomes de métodos.
* O repositório seria uma classe para buscar informações no banco de dados ou no local onde as informações foram persistidas. Mas no caso do JpaRepository ele provê a ligação a determinada classe do Model com possiblidade de persistir no banco de dados

### Interfaces
* CrudRepository
* JPARepository
* PagingAndSortingRepository

### Anotações
* @Query
* @Param

### Principais métodos do SPring Data Jpa
* __save__: insere e atualiza os dados de uma entidade
* __findById__: Retorna o objeto localizado pelo seu ID
* __existsById__: verifique a existência de um objto pelo ID informado, retornando o boolean
* __findall__: retorna uma coleção contendo todos os registros da tabela no banco de dados
* __delete__: deleta um registro da respectiva tabela mapeada do banco de dados
* __count__: retorna a quantidade de registros de uma tabela mapeada do banco de dados

## Repository Pattern
* Repository é um padrão similiar ao DAO (Data Access Object) no sentido de que seu objetivo é abstrair o acesso a dados de forma genérica a partir do seu modelo

## Consultas Customizadas
* Existem duas maneiras de realizar consultas customizadas, uma é conhecindo como QueryMethod e a outra é QueryOverride

### Query Method
* O SPring Data JPA se encarrega de interpretar a assinatura de um método (nome + parâmetros) para montar a **JPQL** correspodente.
* No exemplo abaixo temos uma entidade que possui um endereço de email e sobrenome e gostaria de filtrar por estes dois atributos.
$
public interface UserRepository extends Repository<User, Long> {
	
	List<User> findByEmailAddressAndLastname(String emailAddress, String lastname);

}

Palavra-chave		Exemplo								Trecho JPQL
Distinct		findDistinctByLastnameAndFirstname				select distinct ... where x.lastname = ?1 and x.firstname = ?2
And			findByLastnameAndFirstname					... where x.lastname = ?1 and x.firstname = ?2
Or			findByLastnameOrFirstname					... where x.lastname = ?1 or x.firstname = ?2
Is, Equals		findByFirstname, findByFirstnameIs, findByFirstnameEquals	... where x.firstname = ?1
Between			findByStartDateBetween						... where x.startDate between ?1 and ?2
LessThan		findByAgeLessThan						... where x.age < ? 1
LessThanEqual		findByAgeLessThanEqual						... where x.age <= ? 1
GreaterThan		findByAgeGreaterThan						... where x.age > ? 1
GreaterThanEqual	findByAgeGreaterThanEqual					... where x.age >= ? 1

### Query Override
* Vamos imaginar que precisamos montar uma query um tanto avançada mas ficaria inviável utilizar o padrão __QueryMethod__? Como nossos repositórios são interfaces não temos implementação de código, é ai que precisar definir a consulta de forma manual através da anotação @Query
* Os dois métodos realizam a mesma instrução SQL, consultado os usuários pelo seu campo __name__ comparando com o operador LIKE do SQL.


public interface UserRepository extends JpaRepository<User, Integer> {
    // Query Method - Retorna a lista de usuários contendo a parte do name	
    List<User> findByNameContaining(String name);
    
    // Query Override - Retorna a lista de usuários contendo a parte do name	
    @Query("SELECT u FROM User u WHERE u.name LIKE %:name%")
    List<User> filtrarPorNome(@Param("name") String name);

    // Query Method - Retorna um usuário pelo campo username
    User findByUsername(String username);
}
