# Introdução
* Implementar recursos HTTP para interação de arquivos JSON pelas aplicações.

## O que é API?
* Uma __API__(interface application program) é um código programável que faz a "ponte" de comunicação entre duas aplicações distintas.

## Rest e RestFul
* A API **REST** (Representations state transfer) é como um guia de boas práticas e **RESTful** é a capacidade de determinado sistema aplicar os princípios de REST

## Princípios
* Para que uma arquitetura seja RESTful, é necessário ter uma série de princípios ou padrões. Vejamo quais são eles:
__cliente-servidor__: significa aprimorar a portabilidade entre várias plataformas de interfaces do usuário e do servidor, permitindo uma evolução intependente do sistema.
__interface uniforme__: representa uma interação uniforme entre cliente e servidor. Para isto, é preciso ter uma interface que identifique e represente recursos, mensagens autodescritivas, bem como hypermedia (HATEOAS)
__stateless__: indica que cada interação via API tem acesso a dados completos e compreensíveis
__cache__: necessário para reduzir o tempo médio de resposta, melhorar a eficiência, desempenho e escalabilidade da comunicação
__camadas__: permite que a arquitetura seja menos complexa e altamente flexível

## Nível de Maturidade
* Para padronizar e facilitar o desenvolvimento de APIs REST, Leonard Richardson propôs um modelo de maturidade para esse tipo de API, definido em 4 níveis

### Nível 0: Ausência de Regras
* Esse é considerado o nível mais básico, e uma API que implementa apenas esse nível, não pode ser considerada REST pois não segue qualquer padrão.

**VERBO HTTP**	**URI**			**Operação**
POST		/getUsuario		Pesquisar Usuário
POST		/salvarUsuario		Salvar
POST 		/alterarUsuario 	Alterar
POST 		/excluirUsuario 	Deletar

### Nível 1: Aplicação de Resources
**VERBO HTTP**	**URI**			**Operação**
GET		/usuarios/1		Pesquisar Usuário
POST		/usuarios		Salvar
PUT		/usuarios/1		Alterar
DELETE		/usuarios/1		DELETAR

* Observe que o nome dos recursos foram equalizados e para não gerar ambiguidade é necessário definir um verbo apropriadamente

### Nível 2: Implementação de verbos HTTP
* COmo a definição dos verbos já foi requisitada do Nível 1, o Nível 2 se encarrega de validar a aplicabilidade dos verbos para finalidades específicas como:

**VERBO HTTP**	**Função**			
GET		Retornar Dados
POST		Grava Dados
PUT 		Altera Dados
DELETE 		Remove Dados

### Nível 3: HATEOAS
* HATEOAS significa Hypermedia as the Engine of Application State. Uma api que implementa esse nível fornece aos seus clientes links que indicarão como poderá ser fita a navegação entre recursos. Ou seja, que for consumir a API porecisará saber apenas a rota principa e a resposta dessa requisição terá todas as demais rotas possíveis.

{
  "id": 1,
  "nome": "John",
  "sobrenome": "Doe",
  "links": [
    {
      "rel": "self",
      "href": "http://localhost:8080/clientes/1"
    },
    {
      "rel": "alterar",
      "href": "http://localhost:8080/clientes/1"
    },
    {
      "rel": "excluir",
      "href": "http://localhost:8080/clientes/1"
    }
  ]
}

## Controller
* Um controller é um recurso que disponibiliza as funcionalidades de negócio da aplicação através do protocolo HTTP. Abaixo uma classe de exemplo

## Rest Controller
* Um __Rest Controller__ em Spring nada mais é que uma classe contendo anotações específicas para a disponibilização de recursos HTTPs baseados em nossos serviços e regras de negócio

* Anotaçõs e configurações mais comuns:
__@RestController__: Responsável por designar o bean de componentes que suporta requisições HTTP com base na arquitetura REST.
__@RequestMapping("prefix")__: Determinal qual a URI comum para todos os recursos disponibilizados pelo **Controller**.
__@GetMapping__: Determina que o método aceitará requisições **HTTP** do tipo **GET**.
__@PostMapping__: Determina que o método aceitará requisições **HTTP** do tipo **POST**
__@PutMapping__: Determina que o método aceitará requisições **HTTP** do tipo **PUT**
__@DeleteMapping__: Determina que o método aceitará requisições **HTTP** do tipo **DELETE**
__@RequestBody__: Converte um JSON para o tipo do objeto esperado como parâmetro no método.
__@PathVariable__: Consegue determinar que parte da URI será composta por parâmetros recebidos nas requisições.

## Documentação de API
* Para documentar nossas APIs utilizamos o Swagger. Adicione as depedências abaixo ao arquivo **pom.xml**:

<!--SWAGGER DOCUMENTAÇAO-->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.9.2</version>
		</dependency>

		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.9.2</version>
		</dependency>
		
* Após devemos criar em nosso projeto um novo pacote __doc__ ou __config__ que irá conter a classe de configuração do Swagger como por exemplo a classe __SwaggerConfig__
* Acima da classe deverá ter as annotations __@Configuration__ e __EnableSwagger2__

### Exemplo

package me.dio.springWebApi.doc;

import org.springframework.context.annotation.Configuration;
import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.swagger2.annotations.EnableSwagger2;
import springfox.documentation.service.Contact;

@Configuration
@EnableSwagger2
public class SwaggerConfig {

    private Contact contato() {
        return new Contact(
                "Seu nome",
                "http://www.seusite.com.br",
                "voce@seusite.com.br");
    }

    private ApiInfoBuilder informacoesApi() {

        ApiInfoBuilder apiInfoBuilder = new ApiInfoBuilder();

        apiInfoBuilder.title("Título - Rest API"); // Define o título da API
        apiInfoBuilder.description("API exemplo de uso de Springboot REST - Rest API"); // Descrição da API
        apiInfoBuilder.version("1.0"); // Versão da API
        apiInfoBuilder.termsOfServiceUrl("Termo de uso: Open Source"); // Link para os termos de uso
        apiInfoBuilder.license("Licença - Sua Empresa"); // Nome da licença
        apiInfoBuilder.licenseUrl("http://www.seusite.com.br"); // Link para a licença
        apiInfoBuilder.contact(this.contato()); // Define as informações de contato (definidas em outro lugar)

        return apiInfoBuilder; // Retorna o objeto com as informações da API

    }

}

## Exception Handlers
* Excessões são comuns em qualquer fluxo

* O tratamento de excessão, na ciência da computação, é o mecanismo responsável pelo tratamento da ocorrência de condições que alteram o fluxo normal da execução de programas de computadores.

* Nossas aplicações precisam ser resilientes a possível comportamentos inesperados baseados na proposta de negócio e falando de recursos HTTPs, realizamos implementações que centralizar e gerencial este tipo de tratamento de exceções.

## Exception Handler

* Um manipulador de exceção é o codigo que estipula o que um programa fará quando um evento anômalo interromper o fluxo normal das intruções deste programa.

* Existem alguns tipos de tratamento de exceções em uma aplicação Spring Web, iremos ilustrar duas delas e focar na __ControllerAdvice__ mais utilizada em nossos projetos

### Solução 1: Nível do Controller - @ExceptionHandler

* A primeira solução funciona no nível do @Controller, onde cada método trata uma exceção de forma declarativa com @ExceptionHandler:

**Exemplo**
public class MeuController{
	@ExceptionHandler({MinhaException1.class})
	public void meuMetodo() {
	
	}
}

### Solução 2: o ResponseStatusExceptionResolver
* Sua principal responsabilidade é usar a anotação @ResponseStatus disponível em exceções personalizadas e mapear essas exceções para códigos de status HTTP

**Exemplo**
@ResponseStatus(value = HttpStatus.NOT_FOUND)
public class RecursoNotFoundException extends RuntimeException {
	public RecursoNotFoundException() {
		super();
	}
	
	public RecursoNotFoundException(String mensagem) {
	super(mensagem);
	}
}

## RestControllerAdvice
* Spring 3.2 traz suporte para um **@ExceptionHandler** global com a anotação **@ControllerAdvice**. A anotação @ControllerAdvice nos permite consolidar nossos múltiplos @ExceptionHandlers espalhados de antes em um único componente global de tratamento de erros.
	- Isso nos dá controle total sobre o corpo da resposta, bem como o código de status.
	- Ele fornece o mapeamento de várias exceções ao mesmo método, para serem tratadas em conjunto.
	- Ele faz bom uso da resposta RESTful ResponseEntity mais recente.
	
## GlobalExceptionHandler
* Vamos configurar um tratamento de exceções globoal para interceptar todas as exceções que ocorrem em nossa aplicação, sem precisar tornar declarativo em todos os recursos.

## Customizando nossas mensagems
* Primeiro de tudo uma resposta HTTP mesmo sendo um Erro pode ser condiderada um Objeto que será convertido em JSON expondo informações relacionadas a exceção disparada.

**Exemplo**
import java.util.Date;

public class ResponseError {
    private Date timestamp = new Date();
    private String status = "error";
    private int statusCode = 400;
    private String error;

    // Getters
    
    // setters
}

* O campo **timestamp** é o momento exato da geração da exceção
* O campo **status** é um campo customizado de acordo com seu domínio de negócio
* O campo **statusCode** pode ser um dicionário de erro da sua aplicação
* O campo **error** é a mensagem apresentada ao usuário da aplicação

## Definindo uma exceção de negócio
* Algumas das nossas exceções estão relacionadas ao domínio ou negócio da nossa aplicação, sendo assim vamos criar uma clase de exceção que estende RunTimeException que servirá como base para todas as outras exceções de negócio

* A classe **BusinessException** possui dois construtores, uma para definição de uma mensagem simples e o outro para uma mensagem mais customizada utilizando o recurso de **varargs**

**Exemplo**
public static void main(String[] args) {
	Integer id = 123;
	String tabela = "Livro";
	BusinessException bu = new BusinessException("%s não localizado pelo Id %i");
	System.out.println(bu.getMessage());
}

## Configurando o Exception Handler
* Vamos criar uma classe que captará todas as exceções de negócio BusinessException para tratar e converter e retornar mensagens mais declarativas ao usuário da aplicação


